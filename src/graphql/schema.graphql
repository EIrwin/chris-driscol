schema {
  query: ROOT
  mutation: Mutation
}

type About {
  description: [String]!
  imageUrl: String
  imageCaption: String
  imageTitle: String
  tagLine: String
}

input ContactMeInput {
  from: String!
  name: String!
  subject: String!
  body: String!
  clientMutationId: String
}

type ContactMePayload {
  success: Boolean
  clientMutationId: String
}

type Experience {
  duration: String
  title: String
  location: String
  description: String
  imageUrl: String
}

type Mutation {
  contactMe(input: ContactMeInput!): ContactMePayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type ROOT {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Skills {
  languages: [String!]!
  technologies: [String!]!
  tools: [String!]!
  loves: [String!]!
}

type Social {
  linkedIn: String!
  github: String!
  email: String!
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  title: String!
  description: String!
  skills: Skills!
  experience: [Experience]!
  about: About!
  work: [Work]!
  social: Social!
}

type Work {
  title: String
  subTitle: String
  description: [String]
  location: String
  link: String
  video: String
  date: String
  imageUrl: String
  technologies: [String]
}
